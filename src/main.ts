import * as core from '@actions/core'
import * as github from '@actions/github'
import {fetchVulnerabilities} from './calls/vulnerabilities'
import {VulnerabilityState} from './models/vulnerability-state'
import {PullRequestEvent} from '@octokit/webhooks-types'
import {createMarkdownReport} from './report/markdown-report'
import {createPrComment} from './output/pr-comment'
import {createAppAuth} from '@octokit/auth-app'
import {graphql} from '@octokit/graphql'
import {Octokit} from '@octokit/rest'

export async function run(): Promise<boolean> {
  try {
    const githubAppId = core.getInput('github-app-id', {required: true})
    const githubAppInstallationId = core.getInput(
      'github-app-installation-id',
      {required: true}
    )
    const githubAppPrivateKey = core.getInput('github-app-private-key', {
      required: true
    })

    core.info('Checkpoint 1')

    const authData = {
      appId: githubAppId,
      privateKey: githubAppPrivateKey,
      installationId: githubAppInstallationId
    }
    const auth = createAppAuth(authData)

    core.info('Checkpoint 2')

    const graphqlWithAuth = graphql.defaults({
      request: {
        hook: auth.hook
      }
    })

    core.info('Checkpoint 3')

    const octokit = new Octokit({
      authStrategy: createAppAuth,
      auth: authData
    })

    core.info('Checkpoint 4')

    const {
      repo: {repo, owner}
    } = github.context

    if (github.context.eventName !== 'pull_request') {
      core.setFailed(
        `This action can only run on a pull request trigger event.`
      )
      return false
    }

    const pullRequestPayload = github.context.payload as PullRequestEvent

    core.info('Checkpoint 5')

    const vulnerabilities = await fetchVulnerabilities(
      graphqlWithAuth,
      owner,
      repo
    )

    core.info('Checkpoint 6')
    console.log(vulnerabilities)

    const openVulnerabilities = vulnerabilities.filter(
      it => it.state === VulnerabilityState.OPEN
    )

    core.info('Checkpoint 7')

    const report = createMarkdownReport(openVulnerabilities)

    core.info('Checkpoint 8')

    try {
      await createPrComment(
        octokit,
        pullRequestPayload.number,
        owner,
        repo,
        report
      )
    } catch (error: any) {
      core.setFailed(error)

      return false
    }

    core.info('Successfully attached report. ')

    return true
  } catch (error: any) {
    core.setFailed(error.message)

    return false
  }
}

run()
