import * as core from '@actions/core'
import * as github from '@actions/github'
import {fetchVulnerabilities} from './calls/vulnerabilities'
import {VulnerabilityState} from './models/vulnerability-state'
import {PullRequestEvent} from '@octokit/webhooks-types'
import {createMarkdownReport} from './report/markdown-report'
import {createPrComment} from './output/pr-comment'

export async function run(): Promise<boolean> {
  try {
    const token = core.getInput('token', {required: true})
    const octokit = github.getOctokit(token)
    const {graphql} = octokit
    const {
      repo: {repo, owner}
    } = github.context

    if (github.context.eventName !== 'pull_request') {
      core.setFailed(
        `This action can only run on a pull request trigger event.`
      )
      return false
    }

    const pullRequestPayload = github.context.payload as PullRequestEvent

    const vulnerabilities = await fetchVulnerabilities(graphql, owner, repo)
    const openVulnerabilities = vulnerabilities.filter(
      it => it.state === VulnerabilityState.OPEN
    )

    const report = createMarkdownReport(openVulnerabilities)

    try {
      await createPrComment(
        octokit,
        pullRequestPayload.number,
        owner,
        repo,
        report
      )
    } catch (error: any) {
      core.warning(error)
      return false
    }

    core.info('Succesfully attached report. ')

    return true
  } catch (error: any) {
    core.setFailed(error.message)

    return false
  }
}

run()
