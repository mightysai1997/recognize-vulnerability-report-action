import {expect, it, describe, jest} from '@jest/globals'
import {fetchVulnerabilities} from '../../src/calls/vulnerabilities'

describe('call-vulnerabilities', () => {
    it('should fetch a list of vulnerablities that fit within one page', async () => {
        const graphql = jest.fn(() => ({
            repository: {
                vulnerabilityAlerts: {
                    nodes: [{}, {}, {}] as any,
                    pageInfo: {
                        startCursor: 'start',
                        hasNextPage: false,
                        endCursor: 'end',
                        hasPreviousPage: false,
                    },
                    totalCount: 3
                }
            }
        }))

        await fetchVulnerabilities(graphql as any, 'recognizegroup', 'recognize-vulnerability-report-action')

        expect(graphql).toBeCalledWith(expect.any(String), expect.objectContaining({
            repositoryOwner: 'recognizegroup',
            repositoryName: 'recognize-vulnerability-report-action',
            cursor: undefined,
        }))
        expect(graphql).toBeCalledTimes(1)
    })

    it('should paginate a list of vulnerabilities', async () => {
        const graphql = jest.fn(() => ({
            repository: {
                vulnerabilityAlerts: {
                    nodes: [{}, {}, {}] as any,
                    pageInfo: {
                        startCursor: 'start',
                        hasNextPage: false,
                        endCursor: 'end',
                        hasPreviousPage: false,
                    },
                    totalCount: 6
                }
            }
        }))

        await fetchVulnerabilities(graphql as any, 'recognizegroup', 'recognize-vulnerability-report-action')

        expect(graphql).toBeCalledWith(expect.any(String), expect.objectContaining({
            repositoryOwner: 'recognizegroup',
            repositoryName: 'recognize-vulnerability-report-action',
            cursor: undefined,
        }))
        expect(graphql).toBeCalledWith(expect.any(String), expect.objectContaining({
            repositoryOwner: 'recognizegroup',
            repositoryName: 'recognize-vulnerability-report-action',
            cursor: 'end',
        }))
        expect(graphql).toBeCalledTimes(2)
    })
})