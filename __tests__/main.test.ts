import {expect, it, describe, jest} from '@jest/globals'
import {fetchVulnerabilities} from '../src/calls/vulnerabilities'
import {run} from '../src/main'
import {VulnerabilitySeverity} from '../src/models/vulnerability-severity'
import {VulnerabilityState} from '../src/models/vulnerability-state'
import * as github from '@actions/github'
import {createPrComment} from '../src/output/pr-comment'
import {createMarkdownReport} from '../src/report/markdown-report'

jest.mock('@actions/core', () => ({
  getInput: jest.fn(() => 'test-token'),
  setFailed: jest.fn(),
  warning: jest.fn(),
  info: jest.fn()
}))

jest.mock('@actions/github', () => ({
  context: {
    eventName: 'pull_request',
    payload: {number: 1},
    repo: {
      owner: 'recognizegroup',
      repo: 'security'
    }
  },
  getOctokit: jest.fn(() => ({
    graphql: jest.fn()
  }))
}))

jest.mock('../src/calls/vulnerabilities', () => ({
  fetchVulnerabilities: jest.fn(() => [
    {
      createdAt: '2022-02-02T12:32:52Z',
      id: 'RVA_kwDOGOGtuM5g09lz',
      number: 9,
      state: 'OPEN',
      securityVulnerability: {
        severity: 'MODERATE',
        advisory: {
          cvss: {
            score: 0
          },
          summary: 'Prototype Pollution in hoek'
        },
        package: {
          name: 'hoek',
          ecosystem: 'NPM'
        }
      },
      securityAdvisory: {
        summary: 'Prototype Pollution in hoek'
      }
    }
  ])
}))

jest.mock('../src/output/pr-comment', () => ({
  createPrComment: jest.fn()
}))

jest.mock('../src/report/markdown-report', () => ({
  createMarkdownReport: jest.fn(() => 'report')
}))

describe('main-action', () => {
  it('should only run the action on a pull request trigger', async () => {
    github.context.eventName = 'push'
    const result = await run()

    expect(result).toBe(false)
  })

  it('should attach a vulnerability report', async () => {
    github.context.eventName = 'pull_request'
    const result = await run()

    expect(result).toBe(true)
    expect(fetchVulnerabilities).toBeCalledTimes(1)
    expect(createMarkdownReport).toBeCalledTimes(1)
    expect(createPrComment).toHaveBeenCalledWith(
      expect.any(Object),
      1,
      'recognizegroup',
      'security',
      'report'
    )
  })
})
